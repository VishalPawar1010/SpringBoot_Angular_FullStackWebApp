import http from 'k6/http';
import { sleep } from 'k6';

export const options = {
  scenarios: {
    //    my_web_test_4: {
    //   // some arbitrary scenario name
    //   executor: 'shared-iterations',
    //   vus: 80,
    //   iterations: 80,
    //   maxDuration: '2m',
    //   env: { MY_CROC_ID: '1' }, 
    //   exec: 'webtest',
    // },
    //     my_web_test_5: {
    //   // some arbitrary scenario name
    //   executor: 'per-vu-iterations',
    //   vus: 80,
    //   iterations: 2,
    //   maxDuration: '1m',
    //   tags: { test_type: 'website' },
    //   exec: 'webtest',
    // },
    // for (let i = 0; i < 40; i++) {}

    // my_web_test_6: {
    //     executor: 'per-vu-iterations',
    //     vus: 80,
    //     iterations: 40,
    //     maxDuration: '10h',
    //     tags: { test_type: 'website' },
    //     exec: 'webtest',
    //   },
    // my_web_test: {
    //   // some arbitrary scenario name
    //   executor: 'constant-vus',
    //   vus: 50,
    //   duration: '1m',
    //   gracefulStop: '0s', // do not wait for iterations to finish in the end
    //   tags: { test_type: 'website' }, // extra tags for the metrics generated by this scenario
    //   exec: 'webtest', // the function this scenario will execute
    // },
    // my_api_test_1: {
    //   executor: 'constant-arrival-rate',
    //   rate: 80,
    //   timeUnit: '1m', // 90 iterations per minute, i.e. 1.5 RPS
    //   duration: '2m',
    //   preAllocatedVUs: 5, // the size of the VU (i.e. worker) pool for this scenario
    //   tags: { test_type: 'api' }, // different extra metric tags for this scenario
    //   env: { MY_CROC_ID: '1' }, // and we can specify extra environment variables as well!
    //   exec: 'apitest', // this scenario is executing different code than the one above!
    // },
    // my_api_test_2: {
    //   executor: 'ramping-arrival-rate',
    //   startTime: '30s', // the ramping API test starts a little later
    //   startRate: 50,
    //   timeUnit: '1s', // we start at 50 iterations per second
    //   stages: [
    //     { target: 200, duration: '30s' }, // go from 50 to 200 iters/s in the first 30 seconds
    //     { target: 200, duration: '3m30s' }, // hold at 200 iters/s for 3.5 minutes
    //     { target: 0, duration: '30s' }, // ramp down back to 0 iters/s over the last 30 second
    //   ],
    //   preAllocatedVUs: 50, // how large the initial pool of VUs would be
    //   maxVUs: 100, // if the preAllocatedVUs are not enough, we can initialize more
    //   tags: { test_type: 'api' }, // different extra metric tags for this scenario
    //   env: { MY_CROC_ID: '2' }, // same function, different environment variables
    //   exec: 'apitest', // same function as the scenario above, but with different env vars
    // },
  },
  discardResponseBodies: true,
  thresholds: {
    // we can set different thresholds for the different scenarios because
    // of the extra metric tags we set!
    // 'http_req_duration{test_type:api}': ['p(95)<250', 'p(99)<350'],
    // 'http_req_duration{test_type:website}': ['p(99)<500'],
    // we can reference the scenario names as well
    // 'http_req_duration{scenario:my_api_test_2}': ['p(99)<300'],
  },
};
const hours = 1; // in hours exa=10
const intervalUnit = 15; // in mins exa=15
const intervals = (hours*60)/intervalUnit; // exa = (10*60)/15 = 40

for (let i = 0; i < intervals; i++) {
    const startTime = `${i *intervalUnit}m`;
    const key = `Scenario-${i + 1}`;
  
    options.scenarios[key] = {
        executor: 'per-vu-iterations',
        vus: 1,
        iterations: 80,
        maxDuration: '15m',
        startTime: startTime,
        tags: { test_type: 'website' },
        
        exec: 'webtest',
    };
  }


export function webtest() {
  http.get('https://test.k6.io/contacts.php');
    sleep(30);
}

export function apitest() {
  http.get(`https://test-api.k6.io/public/crocodiles/${__ENV.MY_CROC_ID}/`);
  // no need for sleep() here, the iteration pacing will be controlled by the
  // arrival-rate executors above!
//   sleep();
}
